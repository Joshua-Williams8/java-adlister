import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.sql.*;
import com.mysql.cj.jdbc.Driver; //This one does.

import javax.servlet.jsp.jstl.sql.SQLExecutionTag;


public class MySQLAdsDao implements Ads {

  private Config config = new Config();




  private Connection connection;

  public MySQLAdsDao() throws SQLException {
    try{
      DriverManager.registerDriver(new Driver());
      connection = DriverManager.getConnection(config.getUrl(),"root", config.getPassword());
    }
    catch (SQLException se){
      throw new RuntimeException("Error connecting to database.");
    }

  }



  @Override
  public List<Ad> all() throws SQLException {

    List<Ad> ads = new ArrayList<>();
    try {
        Statement statement = connection.createStatement();

        String selectQuery = "SELECT * FROM ads";

        ResultSet resultSet = statement.executeQuery(selectQuery);
        while (resultSet.next()) {
          ads.add(new Ad(
            resultSet.getLong("user_id"),
            resultSet.getString("title"),
            resultSet.getString("description")));
        }
      } catch (SQLException se){
        se.printStackTrace();
      }
    return ads;
  }

  @Override
  public Long insert(Ad ad) throws SQLException {

    try {
      Statement statement = connection.createStatement();

      String insertQuery = String.format("INSERT INTO ads (user_id, title, description) VALUES (%d, '%s', '%s')", ad.getUserId(), ad.getTitle(), ad.getDescription());


      statement.executeUpdate(insertQuery, statement.RETURN_GENERATED_KEYS);

//    WE CAN THEN USE THE GETGENERATEKEYS() METHOD ON  the resultSet object which will hold any IDs, generated by the dta base.

      ResultSet rsKeys = statement.getGeneratedKeys();

      rsKeys.next();
      return rsKeys.getLong(1);
    } catch (SQLException se) {
      se.printStackTrace();
    }
    return null;
  }


//    So this allows us to track anything that is newly inserted and be tracked by the generated keys and access the ids that were created.
//    if(rsKeys.next()){
//      System.out.println("Inserted ID: " + rsKeys.getLong(1) );
////      If we were inserting multiple statements we could use a while statement
//    }
// Look at jay's code he did his a little differently , and used more methods, and had this one below idk if it's needed....
//  private List<Ad> createAdsFromResults()


  public static void main(String[] args) throws SQLException {
    DriverManager.registerDriver(new Driver());
    Config config = new Config();
    Connection connection = DriverManager.getConnection(
      config.getUrl(),
      config.getUser(),
      config.getPassword());


    Statement statement = connection.createStatement();

    String selectQuery = "SELECT * FROM ads";

    ResultSet resultSet = statement.executeQuery(selectQuery);
    while (resultSet.next()) {
      System.out.println("ID: " + resultSet.getLong("id"));
      System.out.println("User ID: " + resultSet.getLong("user_id"));
      System.out.println("Title: " + resultSet.getString("title"));
    }

  }


}
